@startuml go_esb

skinparam linetype ortho

title ER-Diagram Go ESB

entity "Global" as eGlobal {
    *name : varchar (100)
    --
    *value : int, varchar, boolean, dateTime
}

entity "Users" as eUsers {
    *id : uuid <<FK>>
    --
    *username : varchar (50)
    *password : varchar (50)
}

entity "Systems" as eSystems {
    *id : uuid <<generated>>
    --
    *name : varchar (100)
}

entity "ConnectionSettings" as eConnectionSettings {
    *id : uuid <<generated>>
    --
    *name : varchar (100)
    *system : uuid <<FK>>
    ip : varchar (50)
    port : varchar (50)
    path : varchar (300)
    auth : uuid <<FK>>
}

eConnectionSettings -u-> eSystems : system

entity "ConnectionAuthentications" as eConnectionAuthentications {
    *id : uuid <<generated>>
    --
    *name : varchar (100)
    *system : uuid <<FK>>
    *type : uuid <<FK>>
    username : varchar (50)
    password : varchar (50)
    token : varchar (100)
}

eConnectionSettings -> eConnectionAuthentications : auth
eConnectionAuthentications -u-> eSystems : system
eConnectionAuthentications -> eAuthenticationTypes : type

enum "AuthenticationTypes" as eAuthenticationTypes {
    + Basic
    + BearerToken
}

entity "ThreadsGroups" as eThreadsGroups {
    *id : uuid <<generated>>
    --
    *name : varchar (100)
    *protocol : uuid <<FK>>
    parent : uuid <<FK>>
    message_broker : uuid <<FK>>
}

enum "MessageBrokersTypes" as eMessageBrokersTypes {
    + Kafka
    + Rabbit
}

eThreadsGroups -d-> eProtocols : protocol
eThreadsGroups -> eThreadsGroups : parent
eThreadsGroups -> eMessageBrokersTypes : message_broker

enum "Protocols" as eProtocols {
    + TCP
    + REST
    + SOAP
    + AMQP
}

entity "Thread" as eThreads {
    *id : uuid <<generated>>
    --
    *name : varchar (100)
    *group : uuid <<FK>>
    message_converte_type : uuid <<FK>>
}

eThreads -> eThreadsGroups : group
eThreads -d-> eMessageConverteTypes : message_converte_type

enum "MessageConverteType" as eMessageConverteTypes {
    + Multiplex
    + Split
    + None
}

entity "Routes" as eRoutes {
    *id : uuid <<FK>>
    --
    *name : varchar (100)
    *path : varchar (0)
    *system : uuid <<FK>>
    method : uuid <<FK>>
}

eSystems <- eRoutes : system
eRoutes -d-> eRestMethods : method

enum "RestMethods" as eRestMethods {
    + Get
    + Post
    + Patch
    + Put
    + Delete
}

entity "ThreadRoutes" as eThreadRoutes {
    --
    *thread : uuid <<FK>>
    *route : uuid <<FK>>
    *direction : uuid <<FK>>
    *file_format : uuid <<FK>>
    *object : uuid <<FK>>
    Routine : uuid <<FK>>
}

enum "Directions" as eDirections {
    + In
    + Out
}

enum "FileFormats" as eFileFormats {
    + XML
    + JSON
    + DBF
    + CSV
    + TXT
}

entity "Routines" as eRoutines {
    *id : uuid <<FK>>
    --
    *name : varchar (100)
    *type : uuid <<FK>>
    *code : varchar (0)
}

eRoutineTypes <- eRoutines : type

enum "RoutineTypes" as eRoutineTypes {
    + Before
    + After
}

entity "ThreadObjects" as eThreadObjects {
    *id : uuid <<FK>>
    --
    *name : varchar (100)
    name_object : varchar (100)
    type : uuid <<FK>>
    parent : uuid <<FK>>
}

eThreadRoutes -d-> eThreads : thread
eThreadRoutes -d-> eRoutes : route
eThreadRoutes -u-> eDirections : direction
eThreadRoutes -> eFileFormats : file_format
eRoutines <- eThreadRoutes  : routine
eThreadRoutes -u-> eThreadObjects : object 

enum "ValueTypes" as eValueTypes {
    + String
    + Date
    + Integer
    + Boolean
    + Null
    + Structure
    + Array
}

eValueTypes <-eThreadObjects : type
eThreadObjects -> eThreadObjects : parent

@enduml